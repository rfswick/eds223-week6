---
title: "EDS 223: Week 6"
author: "Rachel Swick"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
library(sf)
library(terra)
library(tidyverse)
library(tmap)
library(spDataLarge)
```

```{r}
# load Zion park boundary (vector object to rasterize)
boundary <- read_sf(system.file("vector/zion.gpkg", package = "spDataLarge")) 

# load elevation raster to use as template raster object
elevation <- rast(system.file("raster/srtm.tif", package = "spDataLarge"))

if(crs(elevation) == crs(boundary)) {
  print("CRS matches")
} else{
  boundary <- sf::st_transform(boundary, st_crs(elevation))
}
```

```{r}
if(st_geometry_type(boundary) == "POLYGON"){
  print("polygon data")
} else{
  print("not polygon data")
}
```

```{r}
# update park boundary object name to clarify that it's a polygon
park_polygon <- boundary

# create line version park boundary
park_border <- boundary %>%
  sf::st_cast(., "MULTILINESTRING")
```

```{r}
polygon_raster <- rasterize(park_polygon, elevation)
border_raster <- rasterize(park_border, elevation)
```

```{r}
tm_shape(polygon_raster) +
  tm_raster()

tm_shape(border_raster) +
  tm_raster()
```

```{r}
# create low spatial resolution template raster
template_raster_low <- terra::rast(ext(park_polygon), resolution = 0.05,
                        crs = st_crs(park_polygon))

# create high spatial resolution template raster
template_raster_high <- terra::rast(ext(park_polygon), resolution = 0.01,
                        crs = st_crs(park_polygon))

# rasterize to low resolution template raster
polygon_raster_low <- terra::rasterize(park_polygon, template_raster_low)

# rasterize to high resolution template raster
polygon_raster_high <- terra::rasterize(park_polygon, template_raster_high)
```

```{r}
tm_shape(polygon_raster_high) +
  tm_raster()

tm_shape(polygon_raster_low) +
  tm_raster()
```

```{r}
cycle_hire_osm <- spData::cycle_hire_osm

cycle_hire_osm_projected <- st_transform(cycle_hire_osm, "EPSG:27700")

template_raster <- rast(ext(cycle_hire_osm_projected),
                               resolution = 1000,
                               crs = crs(cycle_hire_osm_projected))

tm_shape(cycle_hire_osm_projected) +
  tm_symbols()
```




























